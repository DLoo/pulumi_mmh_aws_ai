
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: n8n-app
type: Opaque
data:
  # Replace with your base64 encoded values
  # echo -n 'your_postgres_user' | base64
  # echo -n 'your_strong_password' | base64
  # echo -n 'n8n' | base64
  POSTGRES_USER: ZGJhZG1pbg== # dbadmin
  POSTGRES_PASSWORD: RG9uZTgyMTI= # Done8212
  POSTGRES_DB: bjhu # n8n

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  namespace: n8n-app
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      name: postgres
  clusterIP: None
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: n8n-app
  labels:
    app: postgres
  annotations:
    deletion.kubernetes.io/protect: "true" 
spec:
  serviceName: "postgres-svc"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        # This annotation tells Velero to include the specified volume in the backup.
        backup.velero.io/backup-volumes: postgres-data
        # This hook runs a pg_dump INSIDE the 'postgres' container before the backup.
        pre.hook.backup.velero.io/container: postgres
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "PGPASSWORD=$POSTGRES_PASSWORD pg_dump -U $POSTGRES_USER -d $POSTGRES_DB > /var/lib/postgresql/data/backup.sql"]'
        pre.hook.backup.velero.io/timeout: 5m
        # This hook runs after the pod is restored to import the database dump.
        post.hook.restore.velero.io/container: postgres
        post.hook.restore.velero.io/command: '["/bin/sh", "-c", "dropdb --if-exists -U $POSTGRES_USER $POSTGRES_DB && createdb -U $POSTGRES_USER $POSTGRES_DB && psql -U $POSTGRES_USER -d $POSTGRES_DB < /var/lib/postgresql/data/backup.sql"]'

        # # This hook runs a command INSIDE the 'postgres' container before backing it up.
        # pre.hook.backup.velero.io/container: postgres
        # pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -c \"CHECKPOINT;\""]'
    spec:
      terminationGracePeriodSeconds: 10
      volumes: 
        - name: postgres-data
          persistentVolumeClaim:
            claimName: n8n-app-db-pvc
      restartPolicy: Always
      containers:
        - name: postgres
          image: postgres:15
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_DB
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data # Mount the volume defined above
              mountPath: /var/lib/postgresql/data
          
          resources:
            limits:
              cpu: "1"  
              memory: 2Gi
            requests:
              cpu: "250m"
              memory: 250Mi
          livenessProbe:
            exec:
              command: 
                - /bin/sh
                - -c
                - "pg_isready -q -h localhost -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""
            initialDelaySeconds: 120 # Increased slightly
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "pg_isready -q -h localhost -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""
            initialDelaySeconds: 60 # Increased slightly
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
 

